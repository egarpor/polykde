% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tests.R
\name{hd_mc}
\alias{hd_mc}
\title{Hellinger distance between two densities via Monte Carlo}
\usage{
hd_mc(log_f, log_g, d, bhatta = FALSE)
}
\arguments{
\item{log_f, log_g}{logarithms of \eqn{f} and \eqn{g} evaluated in a Monte
Carlo sample.}

\item{d}{vector of size \code{r} with dimensions.}

\item{bhatta}{compute the Bhattacharyya divergence (or coefficient) instead?
Defaults to \code{FALSE}.}
}
\value{
A scalar with the estimated distance.
}
\description{
Computes the Hellinger distance
\deqn{H(f, g) = \sqrt(1 - \int_{\mathcal{S}^{d_1} \times \ldots \times
\mathcal{S}^{d_r}} \sqrt(f(\boldsymbol{x}) g(\boldsymbol{x}))
d\boldsymbol{x})} between two densities \eqn{f} and \eqn{g} on
\eqn{\mathcal{S}^{d_1} \times \ldots \times \mathcal{S}^{d_r}} via
Monte Carlo.
}
\examples{
# Example with von Mises--Fisher distributions
M <- 1e3
d <- c(1, 3)
mu <- r_unif_polysph(n = 1, d = d)
kappa <- c(1, 5)
x_mc <- r_unif_polysph(n = M, d = d)
log_f <- d_vmf_polysph(x = x_mc, d = d, mu = mu, kappa = kappa, log = TRUE)
log_g <- d_vmf_polysph(x = x_mc, d = d, mu = -mu, kappa = kappa, log = TRUE)
polykde:::hd_mc(log_f = log_f, log_g = log_f, d = d)
polykde:::hd_mc(log_f = log_f, log_g = log_g, d = d)
polykde:::hd_mc(log_f = log_f, log_g = log_f, d = d, bhatta = TRUE)
polykde:::hd_mc(log_f = log_f, log_g = log_g, d = d, bhatta = TRUE)
}
\keyword{internal}
